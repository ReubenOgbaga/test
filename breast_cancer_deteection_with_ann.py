# -*- coding: utf-8 -*-
"""Breast cancer deteection with ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PAOoXMEok1KXq8bsyQYHdsgX47KBDt4X

# Importation of Libraraies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import tensorflow as tf

"""# Data preparation

"""

df = pd.read_csv('/content/data.csv')

df.head()

df=df.drop(['Unnamed: 32', 'id'],axis=1)

df.head()

df.info()

df['diagnosis'].unique()

X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

x_test, x_train, y_test, y_train = train_test_split(X, y, test_size=0.2, random_state=55)

from sklearn.preprocessing import LabelEncoder

# Ensure `y_train` is numeric
label_encoder = LabelEncoder()
y_train = label_encoder.fit_transform(y_train)
y_test = label_encoder.transform(y_test)

x_test.shape, x_train.shape, y_test.shape, y_train.shape

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

"""# Define the Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# stating the model name
model = Sequential()
# First layer
model.add(Dense(64, activation='relu', input_shape=(30,)))
# Second layer
model.add(Dense(32, activation='relu'))
# Third layer
model.add(Dense(16, activation='relu'))
# Output layer
model.add(Dense(1, activation='sigmoid'))

"""# Compiling the Training the Model"""

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.3)

"""# Model Evaluation"""

loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy*100:.2f}%")

y_pred = model.predict(x_test)
y_pred = (y_pred > 0.5).astype(int)

"""# Learning_curve"""

def learning_curve(history, epoch):
  epoch_range = range(1, epoch +1)
  accuracy = history.history['accuracy']
  val_accuracy = history.history['val_accuracy']
  loss = history.history['loss']
  val_loss = history.history['val_loss']
  plt.plot(epoch_range, accuracy)
  plt.plot(epoch_range, val_accuracy)
  plt.title('Model accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend(['train', 'val'], loc='upper left')
  plt.show()

  plt.plot(epoch_range, loss)
  plt.plot(epoch_range, val_loss)
  plt.title('Model Loss')
  plt.xlabel('Epoch')
  plt.ylabel('Loss')
  plt.legend(['train', 'val'], loc='upper left')

learning_curve(history, 10)



