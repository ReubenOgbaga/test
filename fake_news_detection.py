# -*- coding: utf-8 -*-
"""Fake News Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14aGKGcPRMZshdbuBNKLRhZGHlC_SB0KO

Classifying article news as Real or Fake Using Machine Learning

# Importation of Required Libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

"""# Loading The Dataset"""

from google.colab import files
# uploaded= files.upload()

df = pd.read_csv('/content/data.csv.zip')

df.head()

"""# Data Preprocessing

"""

# Checking for missing values
df.isnull().sum()
# Droping the missing values
df.dropna(inplace=True)

df['Label'].unique()

X = df['Body']
y = df['Label']

"""# Split Dataset and Vectorizing The Text Data"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Length of X_train:", len(X_train))
print("Length of y_train:", len(y_train))
print("Length of X_test:", len(X_test))
print("Length of y_test:", len(y_test))

print("Sample from X_train:", X_train[:3])
print("Sample from y_train:", y_train[:3])

tfidf = TfidfVectorizer(max_features=5000, stop_words='english')

# Transform X_train
X_train_tfidf = tfidf.fit_transform(X_train)
print("Shape of X_train_tfidf:", X_train_tfidf.shape)

# Transform X_test
X_test_tfidf = tfidf.transform(X_test)
print("Shape of X_test_tfidf:", X_test_tfidf.shape)

tfidf = TfidfVectorizer(max_features=5000, stop_words='english')

# Transform training and testing data
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

"""# Training The Model"""

model = LogisticRegression()

# Train the model
model.fit(X_train_tfidf, y_train)

# Make predictions
y_pred = model.predict(X_test_tfidf)

"""# Evaluate the Model"""

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Classification Report
print(classification_report(y_test, y_pred))

"""# Saving The Model

"""

import joblib

# Save model and TF-IDF vectorizer
joblib.dump(model, 'fake_news_model.pkl')
joblib.dump(tfidf, 'tfidf_vectorizer.pkl')

"""# Testing The Model

"""

# Predict new text
new_text = input('Enter the news you want to verify: ')  # User input
new_text_tfidf = tfidf.transform([new_text])  # Wrap input in a list
prediction = model.predict(new_text_tfidf)

# Output the result
if prediction[0] == 1:
    print("This news is REAL.")
else:
    print("This news is FAKE.")

